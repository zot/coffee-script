Bill Burdick's mods to Coffeescript
====

More info below the Coffeescript readme contents...

=
            {
         }   }   {
        {   {  }  }
         }   }{  {
        {  }{  }  }                    _____       __  __
       ( }{ }{  { )                   / ____|     / _|/ _|
     .- { { }  { }} -.               | |     ___ | |_| |_ ___  ___
    (  ( } { } { } }  )              | |    / _ \|  _|  _/ _ \/ _ \
    |`-..________ ..-'|              | |___| (_) | | | ||  __/  __/
    |                 |               \_____\___/|_| |_| \___|\___|
    |                 ;--.
    |                (__  \            _____           _       _
    |                 | )  )          / ____|         (_)     | |
    |                 |/  /          | (___   ___ _ __ _ _ __ | |_
    |                 (  /            \___ \ / __| '__| | '_ \| __|
    |                 |/              ____) | (__| |  | | |_) | |_
    |                 |              |_____/ \___|_|  |_| .__/ \__|
     `-.._________..-'                                  | |
                                                        |_|


  CoffeeScript is a little language that compiles into JavaScript.

  Install Node.js, and then the CoffeeScript compiler:
  sudo bin/cake install

  Or, if you have the Node Package Manager installed:
  npm install coffee-script

  Compile a script:
  coffee /path/to/script.coffee

  For documentation, usage, and examples, see:
  http://coffeescript.org/

  To suggest a feature, report a bug, or general discussion:
  http://github.com/jashkenas/coffee-script/issues/

  If you'd like to chat, drop by #coffeescript on Freenode IRC,
  or on webchat.freenode.net.

  The source repository:
  git://github.com/jashkenas/coffee-script.git

  All contributors are listed here:
  http://github.com/jashkenas/coffee-script/contributors

Bill's Mods
====
mofor -- a for-comprehension that works for custom collections, like Scala's for Syntax:

      mofor [[variable ["in" expr]] do]
        expr | variable "in" expr | filter
        ...

      mofor [variable "in" expr do]
        expr | variable "in" expr | filter
        ...
          body

      mofor expr | variable "in" expr
       body

where expr returns an object that understands map, flatMap, filter, reduce, and forEach

If used as an expression, mofor will translate to a series of maps, flatMaps, reduces, and filters, resulting in either nothing (for a statement), a new version of the do expression (when using "do"), or a flattened collection of results (when not using "do").  If used as a statement, it translates into a series of forEaches and filters.  Bound closures are created where necessary (like using '=>' instead of "->").  This will work for custom collections and monads, in addition to arrays.  Without "do," mofor uses flatMap and map.  With "do," mofor instead uses reduce.  If you nest a mofor as an expression in another mofor, you can leave out the "do" variable from the nested mofor and it will reuse the variable from the outer one.

Here's an example that produces the cross product of two collections, where at least one of the elements is odd:

      crossValues = mofor
        n1 in numbers1
        n2 in numbers2
        if n1 % 2 != 0 or n2 % 2 != 0
          [n1, n2]

Equivalent Coffeescript would be:

      crossValues = numbers1.flatMap (n1) -> numbers2.filter((n2) -> n1 % 2 != 0 or n2 % 2 != 0).map (n2) -> [n1, n2]

or (assuming that numbers1 and numbers2 are arrays and not custom collections):

      crossValues = []
      for n1 in numbers1
        for n2 in numbers2
	  if n1 % 2 != 0 or n2 % 2 != 0
	    crossValues.push [n1, n2]


Here is an example that uses a monad to track the movement of a ship across [1,1], [1,2], [1,3], ... [5,5]:

     mofor game in currentGame do
       game.put "Moving ship"
       mofor do
         x in [1,2,3,4,5]
         y in [1,2,3,4,5]
         game.moveShip x, y
	 p in game.pos
	 game.print "MOVED TO: #{p[0]}, #{p[1]}"
       game.put "Done moving ship"
       	 17

which translates to this:

  currentGame.reduce ((game, _i1) ->
    (game.put "Moving ship").reduce ((game, _i2) ->
      (game.reduce ((game, _i3) ->
        [1,2,3,4,5].reduce ((game, _i4) ->
  	  [1,2,3,4,5].reduce ((game, _i5) ->
	    game.moveShip x, y.reduce ((game, _i6) ->
	      game.pos.reduce ((game, _i7) ->
	        game.print "MOVED TO: #{p[0]}, #{p[1]}"
	      ), game
	    ), game
	  ), game
	), game
      ), game).reduce ((game, _i5) ->
        (game.put "Done moving ship").unit(17)
      ), game
    ), game
  )


TODO
Handle destructuring assignment with MoBind:
MoBind: [
  o 'Assignable MOFORIN Expression'
  o 'Expression'
]
